# schema
# <new_table_name>:
#   <first_table>:
#     __BEFORE: SQL query executed on the OLD database before conversion, @ represents table name
#     __AFTER: SQL query executed on the OLD database after conversion, @ represents table name
#     __WHERE: <WHERE clause> include to conversion only columns which matches WHERE clause
#     <column>: [include only changed columns]
#       [use only parameters which changes]
#       action: <new_action> [default: copy] (valid: copy, add, remove)
#       name: <new_column_name> [id - not necessary] (name == id ? action = remove)
#       from: <new_table_name> [take values from this table using mapping from 'from' table
#                                i.e. you have x2 table and you want to port ids from it but
#                                mapped as those ids from x1 table (one-to-one relation)
#                                only for ids!]
#       field: <new_table_field> [if mapping is not by id, but by other field, put here its name]
#       function: <function(@)> apply a SQL function on inserted data => @ represents field, @@ represents old database name)
#     <column2>:
#       <...>
#     <...>
#   <second_table>:
#     <...>
#   <...>
01_users:
  users:
    __BEFORE: ALTER TABLE users_k1 ADD band2 varchar(4);
    __AFTER: UPDATE users_k1 SET band2 = band
    pass:
      name: password
      function: SHA1(@)
    time:
      name: created_on
    timeact:
      name: updated_at
    priv:
      name: privileges
      function: ((((((((@ & 64) >> 3) | (64 & @)) | (@ & 183)) & 128) >> 2) | ((((((@ & 64) >> 3) | (64 & @)) | (@ & 183)) & 128) >> 6)) | (((((@ & 64) >> 3) | (64 & @)) | (@ & 183)) & 93))
    s_hydview:
      action: remove
    www:
      name: www_page
    wwwdesc:
      name: www_description
    sunuml:
      action: remove
    surname:
      name: lastname
    privileges:
      action: remove
    kind:
      action: remove
    activated:
      function: '1'
#02_cathedrals:
#  cathedrals:
#    __BEFORE: ALTER TABLE users_k1 ADD band2 varchar(4);
#    __AFTER: UPDATE users_k1 SET band2 = band
03_users_students:
  users_k1:
    __BEFORE: INSERT INTO @ (id) SELECT id FROM users WHERE id NOT IN (SELECT id FROM users_k1) AND id NOT IN (SELECT id from users_k2) AND login IS NOT NULL AND kind = 1
    __AFTER: ALTER TABLE users_k1 DROP band2
    id:
      from: users
      name: user_id
    band:
      name: sgroup
    band2:
      name: speciality_id
      function: IF((SELECT (SUBSTRING(NOW(),1,4) - CONCAT('20', SUBSTRING(@, 2,2))) > 2),IF((SELECT SUBSTRING(@, 4,1)) > 3,2,3),1)
    indeks:
      name: sindex
    gg:
      name: gadu_gadu
    module:
      action: remove
    modified:
      action: remove
    nband:
      action: remove
04_users_lecturers:
  users_k2:
    __BEFORE: INSERT INTO @ (id) SELECT id FROM users WHERE id NOT IN (SELECT id FROM users_k1) AND id NOT IN (SELECT id from users_k2) AND login IS NOT NULL AND kind = 2
    __AFTER: INSERT INTO specs_types VALUES (10, 'Przedmioty innego typu')
    id:
      from: users
      name: user_id
    cathedral:
      name: cathedral_id
      function: @ + 1
    consul:
      name: consultations
05_subjects_types:
  specs_types:
    __BEFORE: ALTER TABLE @ CHANGE typ typ integer
    __AFTER: ALTER TABLE @ CHANGE typ typ boolean
    opis:
      name: head
    typ:
      name: mandatory
      function: @ NOT IN (4,6,10)
06_subjects:
  specs:
    __BEFORE: UPDATE @ SET type = NULL where type = 0
    __AFTER: UPDATE @ SET type = 0 where type IS NULL
    name:
      name: head
    acronim:
      name: acronym
    type:
      name: subjects_type_id
07_news_types:
  news_types:
    __BEFORE: DELETE FROM specs_types WHERE typ = 10
08_news:
  news:
    alogin:
      from: users
      field: login
      name: user_id
    aname:
      action: remove
    nyear:
      name: for_year
    piece:
      name: body
    mreads:
      name: times_readed
    spec:
      name: subject_id
      from: subjects
    thread:
      action: remove
    type:
      action: remove
    year:
      action: remove
09_groups:
  groupstruct:
    name:
      name: head
    aid:
      name: user_id
      from: users
    alogin:
      action: remove
    king:
      action: remove
    since:
      action: remove
10_groups_users:
  groupmembs:
    __AFTER: ALTER TABLE groupmembs ADD uid2 integer DEFAULT null
    gid:
     from: groups
     name: group_id
    uid:
     from: users
     name: user_id
10a_groups_users:
  groupmembs:
    __BEFORE: UPDATE groupmembs SET uid2 = uid
    __AFTER:  ALTER TABLE groupmembs DROP uid2
    uid:
      name: group_id
      function: (FLOOR(REPLACE((SELECT @@.users_k1.band FROM @@.users_k1 ORDER BY @@.users_k1.band DESC LIMIT 1), 'K', '') / 10) - FLOOR(REPLACE((SELECT @@.users_k1.band FROM @@.users_k1 WHERE @@.users_k1.id = @), 'K', '') / 10) + 5)
    uid2:
      from: users
      name: user_id
    gid:
      action: remove
11_uploaded_files:
  files:
    filename1:
      action: remove
    name:
      name: head
    time:
      name: date
    alogin:
      action: remove
    aid:
      from: users
      name: user_id
    down:
      name: downloads
    spec:
      from: subjects
      name: subject_id
    rlogin:
      action: remove
    rid:
      from: users
      name: uploader_id
    sectype:
      name: kind
      function: CASE FLOOR(@ / 10) WHEN 1 THEN 'material' WHEN 2 THEN 'grade' ELSE '' END
    secgroup:
      action: remove
12_groups_uploaded_files:
  files:
    __WHERE: sectype IN (11, 21)
    secgrp:
      name: group_id
      function: @ + 4
    id:
      from: uploaded_files
      name: uploaded_file_id
12a_groups_uploaded_files:
  files:
    __WHERE: sectype IN (12, 22)
    secgrp:
      name: group_id
      function: @ + 19
    id:
      from: uploaded_files
      name: uploaded_file_id
12b_groups_uploaded_files:
  files:
    __WHERE: sectype IN (13, 23)
    secgrp:
      name: group_id
      function: '1'
    id:
      from: uploaded_files
      name: uploaded_file_id
13_polls_questions:
  polls_q:
    date_b:
      name: start_time
    date_e:
      name: end_time
    anonim:
      name: anonymous
    author_id:
      from: users
      name: user_id
    author_lg:
      action: remove
14_polls_answers:
  polls_a:
    r_id:
      name: polls_question_id
      from: polls_questions
    quant:
      name: quantity
15_exams:
  exams:
    spec:
      name: subject_id
      from: subjects
    core:
      name: exams_name_id
    pro:
      name: examiner
    aid:
      name: user_id
      from: users
    dt_year:
      name: date
      connect: "dt_year, dt_month, dt_day, dt_hour, dt_min"
      pattern: "{dt_year}-{dt_month}-{dt_day} {dt_hour}:{dt_min}"
16_events:
  calendar:
    start:
      name: beginning
    deadline:
      name: ending
    event:
      name: head
    year:
      name: for_year
#17_declarations:
#  decs_wpo:
#    uid:
#      name: user_id
#      from: users
#    spec:
#      name: subject_id
#      from: subjects
#    ts:
#      name: term
#    sem:
#      action: remove
